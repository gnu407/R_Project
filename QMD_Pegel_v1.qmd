---
title: "Elias_PegelUrsprung_2025"
format: html
editor: visual
---

25.03.2025 v1 by Jakob Kniess

# R Script to compare Partnach Gauge levels after and before at Partnach Ursprung

GitHub: follow this tutorial for everything else :)

<https://www.youtube.com/playlist?list=PLSviU861UtD81AuyYb3SbndmAA_qTCoLe>

```{r}
# LIBRARIES
library(dplyr)
library(lubridate)
library(ggplot2)
library(plotly)
#install.packages("dplyr")
```

## CONFIG

```{r}
# CONFIG
path_ursprung = normalizePath("C:\\Users\\Jakob\\OneDrive - Universität Augsburg\\Job Uni\\G-MONARCH\\ONGOING\\Elias_PegelOffset_2025\\Datensatz_Partnach_v1\\Partnach_Ursprung\\Abflüsse_nach_Jahren")

path_bock = normalizePath("C:\\Users\\Jakob\\OneDrive - Universität Augsburg\\Job Uni\\G-MONARCH\\ONGOING\\Elias_PegelOffset_2025\\Datensatz_Partnach_v1\\Partnach_Bockhütte\\Abflüsse_nach_Jahren")

```

### 1. Functions

```{r}
# FUCTIONS

# F1 - Read and combine files
read_and_combine <- function(base_folder_path) {
  
  # List all CSV files that start with "Produkt_" in the year-based subfolders
  files <- list.files(base_folder_path, pattern = "^Produkt_.*\\.csv$", full.names = TRUE, recursive = TRUE)
  #print (files)
  if (length(files) == 0) {
    stop("No CSV files starting with 'Produkt_' found in the specified folder or its subfolders.")
  }
  
  # Read and standardize the columns before binding
  df_list <- lapply(files, function(file) {
    df <- read.csv(normalizePath(file))
    
    # Ensure that all columns exist and convert all to character for consistency
    df[] <- lapply(df, function(col) {
      # Convert each column to character
      col <- as.character(col)
      
      # Replace empty values with NaN (missing values should be converted to NaN)
      col[col == ""] <- NA
      
      return(col)
    })
    
    return(df)
  })
  
  # Combine all data frames
  combined_df <- bind_rows(df_list)
  
  return(combined_df)
}

#F2 - Function To clean the dataframes

clean_dataframe <- function(df) {
  
  # 0. Convert NaN to NA
  df[df == "NaN"] <- NA
  
  # 1. Set MESS_DATUM to Datetime format
  if ("MESS_DATUM" %in% colnames(df)) {
    df$MESS_DATUM <- strptime(df$MESS_DATUM, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
  }
  
  # 2. Remove STATIONS_ID Column
  if ("STATIONS_ID" %in% colnames(df)) {
    df <- df[, !colnames(df) %in% "STATIONS_ID"]
  }
  

  
  # 3. Convert specific columns to numeric
  cols_to_convert <- c("Q", "P_R_W", "P_D_W", "T_W", "LF_W")
  
  # Apply conversion to numeric, if the columns exist
  for (col in cols_to_convert) {
    if (col %in% colnames(df)) {
      df[[col]] <- as.numeric(df[[col]])
    }
  }
  
  # 4. Round all numeric columns to 2 decimal places
  num_cols <- sapply(df, is.numeric)  # Identify numeric columns
  df[num_cols] <- round(df[num_cols], 2)  # Round numeric columns to 2 decimal places
  
  return(df)
}
```

### 2. Data Input

```{r}
# DATA INPUT
df_ursprung_RAW <- read_and_combine(path_ursprung)
df_bock_RAW <- read_and_combine(path_bock)
```

### 3. Clean up Dataframes

```{r}
# Clean Dataframes
df_ursprung <- clean_dataframe(df_ursprung_RAW)
df_bock <- clean_dataframe(df_bock_RAW)

```

## Q and Waterlevel Relationship

```{r}
# Remove all Years before 2015

# Filter rows where MESS_DATUM is before 2015 using base R
df_ursprung_00 <- df_ursprung[as.numeric(format(df_ursprung$MESS_DATUM, "%Y")) >= 2015, ]
df_bock_00 <- df_bock[as.numeric(format(df_bock$MESS_DATUM, "%Y")) >= 2015, ]
#head(df_bock_00)
```

```{r}
# Create Dataframes with daily data

# Extract the date (ignoring time) and group by that
df_ursprung_01 <- df_ursprung_00 %>%
  mutate(Date = as.Date(MESS_DATUM)) %>%  # Create a new Date column with only the date part
  group_by(Date) %>%  # Group by the Date
  summarize(across(everything(), mean, na.rm = TRUE))  # Calculate mean for all columns, ignoring NA


# Extract the date (ignoring time) and group by that
df_bock_01 <- df_bock_00 %>%
  mutate(Date = as.Date(MESS_DATUM)) %>%  # Create a new Date column with only the date part
  group_by(Date) %>%  # Group by the Date
  summarize(across(everything(), mean, na.rm = TRUE))  # Calculate mean for all columns, ignoring NA

```

```{r}
# Create a single Dataframe

# Merge the dataframes based on MESS_DATUM, keeping only one MESS_DATUM column
df_combined_01<- df_ursprung_01 %>%
  left_join(df_bock_01, by = "Date", suffix = c("_Ursprung", "_Bock"))

# CLEANUP - it got a bit dirty 
# Remove unwanted columns and rename Date_Ursprung to MESS_DATUM
df_combined_00 <- df_combined_01 %>%
  select(-MESS_DATUM_Ursprung,   # Remove the redundant MESS_DATUM from df_bock_01
         -MESS_DATUM_Bock) %>%      # Remove Date_Bock column
  rename(MESS_DATUM = Date)  # Rename Date_Ursprung to MESS_DATUM

# Round to 2 decimal places

# Identify numeric columns except the first column (assuming MESS_DATUM is the first column)
num_cols <- sapply(df_combined_00, is.numeric)  # Identify numeric columns
num_cols[1] <- FALSE  # Exclude the first column (MESS_DATUM or any other non-numeric column)

df_combined_00[num_cols] <- round(df_combined_00[num_cols], 2)  # Round numeric columns to 2 decimal places
  

```

### Plots daily Q and Waterlevel

LEGACY // Extract Year from MESS_DATUM column and add as a new column df_combined_00 \<- df_combined_00 %\>% mutate(Year = as.numeric(format(MESS_DATUM, "%Y"))) \# Extract year as numeric

//Create the scatterplot with publication-quality formatting p \<- ggplot(df_combined_00, aes(x = Q_Bock, y = Q_Ursprung, color = factor(Year))) + geom_point(alpha = 0.7, size = 2) + \# Scatterplot with semi-transparent points scale_colour_brewer(palette = "Paired") + \# Use a color scale (Viridis is colorblind-friendly) labs(x = "Q Bock", y = "Q Ursprung", color = "Year") + \# Axis labels and legend title theme_minimal(base_size = 14) + \# Minimal theme with a bigger base font size theme( legend.position = "right", \# Position the legend to the right legend.title = element_text(size = 14, face = "bold"), legend.text = element_text(size = 12), axis.title = element_text(size = 14, face = "bold"), axis.text = element_text(size = 12), #panel.grid.major = element_blank(), \# Remove major gridlines #panel.grid.minor = element_blank(), \# Remove minor gridlines plot.title = element_text(size = 16, face = "bold", hjust = 0.5) \# Title ) + ggtitle("Scatter Plot of Q_Bock vs. Q_Ursprung") \# Add a title

// Print the plot print(p)

```{r}
# PLOT - DISCHARGE
# Extract Year from MESS_DATUM column and add as a new column
df_combined_00 <- df_combined_00 %>%
  mutate(Year = as.numeric(format(MESS_DATUM, "%Y")))  # Extract year as numeric

# Create the scatterplot with publication-quality formatting
p <- ggplot(df_combined_00, aes(x = Q_Bock, y = Q_Ursprung, color = factor(Year), text = paste("Year: ", Year, "<br>Q Bockhütte: ", Q_Bock, " m³", 
                                            "<br>Q Partnach-Ursprung: ", Q_Ursprung, " m³"))) +
  geom_point(alpha = 0.7, size = 2) +  # Scatterplot with semi-transparent points
  scale_colour_brewer(palette = "Paired") +  # Use a color scale
  labs(x = "Q Bockhütte [m³]", y = "Q Partnach-Ursprung [m³]", color = "Year") +  # Axis labels and legend title
  theme_minimal(base_size = 14) +  # Minimal theme with a bigger base font size
  theme(
    legend.position = "right",  # Position the legend to the right
    legend.title = element_text(size = 14, face = "normal"),
    legend.text = element_text(size = 12),
    axis.title = element_text(size = 14, face = "normal"),
    axis.text = element_text(size = 12),
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5)  # Title
  ) +
  ggtitle("Plot of average daily discharge at Bockhütte and Partnach-Ursprung")

# Convert the ggplot object to a plotly object for interactivity
interactive_plot <- ggplotly(p, tooltip = "text")  # Tooltip shows the year when hovering over the points

# Display the interactive plot
interactive_plot
```

```{r}

# Create the scatterplot with publication-quality formatting
p <- ggplot(df_combined_00, aes(x = P_D_W_Bock, y = P_D_W_Ursprung, color = factor(Year), 
                               text = paste("Year: ", Year, "<br>Waterlevel Bockhütte: ", P_D_W_Bock, " cm", 
                                            "<br>Waterlevel Partnach-Ursprung: ", P_D_W_Ursprung, " cm"))) +
  geom_point(alpha = 0.7, size = 2) +  # Scatterplot with semi-transparent points
  scale_colour_brewer(palette = "Dark2") +  # Use a color scale
  labs(x = "Waterlevel Bockhütte [cm]", y = "Waterlevel Partnach-Ursprung [cm]", color = "Year") +  # Axis labels and legend title
  theme_minimal(base_size = 14) +  # Minimal theme with a bigger base font size
  theme(
    legend.position = "right",  # Position the legend to the right
    legend.title = element_text(size = 14, face = "normal"),
    legend.text = element_text(size = 12),
    axis.title = element_text(size = 14, face = "normal"),
    axis.text = element_text(size = 12),
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5)  # Title
  ) +
  ggtitle("Plot of average daily waterlevel at Bockhütte and Partnach-Ursprung")

# Convert the ggplot object to a plotly object for interactivity
interactive_plot <- ggplotly(p, tooltip = "text")  # Tooltip shows the custom information when hovering over the points

# Display the interactive plot
interactive_plot
```

## Histograms of Daily Q and Waterlevel

### Bockhütte

#### Q - TEST

```{r}

# UNFINISHED

# Assuming df_combined_00 is your dataframe

# Create a new column to extract year for faceting
df_combined_00 <- df_combined_00 %>%
  mutate(Year = as.numeric(format(MESS_DATUM, "%Y")))  # Extract year as numeric

# Calculate overall statistics for Q_Bock (mean, median, std) by year
stats_by_year <- df_combined_00 %>%
  group_by(Year) %>%
  summarise(
    mean_QBock = mean(Q_Bock, na.rm = TRUE),
    median_QBock = median(Q_Bock, na.rm = TRUE),
    std_QBock = sd(Q_Bock, na.rm = TRUE)
  )

# Filter out years without any data
df_combined_00 <- df_combined_00 %>% 
  filter(!is.na(Q_Bock))  # Remove rows where Q_Bock is NA

# Create the histogram plot
p <- ggplot(df_combined_00, aes(x = Q_Bock)) +
  
  # Layer 1: Overall histogram of Q_Bock
  geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black", alpha = 0.7, aes(y = ..density..)) +
  
  # Add vertical lines for mean, median, and std
  geom_vline(aes(xintercept = mean(Q_Bock, na.rm = TRUE)), color = "red", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = median(Q_Bock, na.rm = TRUE)), color = "green", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = mean(Q_Bock, na.rm = TRUE) + sd(Q_Bock, na.rm = TRUE)), color = "blue", linetype = "dotted", size = 1) +
  geom_vline(aes(xintercept = mean(Q_Bock, na.rm = TRUE) - sd(Q_Bock, na.rm = TRUE)), color = "blue", linetype = "dotted", size = 1) +
  
  # Layer 2: Facet smaller histograms by Year (faceting by Year)
  geom_histogram(data = df_combined_00, aes(x = Q_Bock, y = ..density..), 
                 binwidth = 0.5, fill = "lightgrey", color = "black", alpha = 0.5) +
  
  # Customize the x-axis limit (fixed to be between 0 and the max Q_Bock value)
  scale_x_continuous(limits = c(0, max(df_combined_00$Q_Bock, na.rm = TRUE))) +
  
  # Faceting by Year
  facet_wrap(~ Year, scales = "free_y", ncol = 2) +
  
  # Labels and theme
  labs(x = "Discharge Bock [m³]", y = "Density", title = "Histogram of discharge at Bockhütte ") +
  
  # Customize the theme for a clean, scientific look
  theme_minimal(base_size = 14) +
  theme(
    strip.text = element_text(size = 12, face = "bold"),  # Facet labels
    axis.title = element_text(size = 14, face = "bold"),
    axis.text = element_text(size = 12),
    legend.position = "none",  # Remove legend
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    panel.grid.major = element_line(color = "gray", size = 0.2),  # Add gridlines
    panel.grid.minor = element_blank()  # Remove minor gridlines
  ) +
  
  # Add text boxes for mean, median, and std (in a clean box layout)
  geom_text(data = stats_by_year, aes(x = mean_QBock, y = 0.02, 
                                      label = paste("Mean: ", round(mean_QBock, 2), 
                                                    "\nMedian: ", round(median_QBock, 2), 
                                                    "\nStd: ", round(std_QBock, 2))),
            color = "black", size = 3, hjust = 0, vjust = 0, 
            inherit.aes = FALSE) +
  
  # Add box around the text
  geom_rect(data = stats_by_year, aes(xmin = mean_QBock - 0.5, xmax = mean_QBock + 1.5, 
                                      ymin = 0, ymax = 0.1), fill = "white", 
            color = "black", size = 0.5, inherit.aes = FALSE)

# Print the plot
print(p)


```

# Regression

## Q regression for all Years

```{r}
# Clean dataframa of NAs
# Remove rows with missing values or invalid Q_Ursprung (<= 0)
df_combined_02 <- df_combined_00[!is.na(df_combined_00$Q_Ursprung) & df_combined_00$Q_Ursprung > 0 & !is.na(df_combined_00$Q_Bock), ]
```


```{r}
# Assuming your data is in a DataFrame called 'df_combined_00' with columns 'Year', 'Q_Ursprung', and 'Q_Bock'

# Step 1: Perform a linear regression for each year
linear_models <- df_combined_00 %>%
  group_by(Year) %>%
  do(model = lm(Q_Bock ~ Q_Ursprung, data = .))

# Step 2: Extract the coefficients and create a new data frame with the results
model_summary <- linear_models %>%
  summarise(Year = Year,
            Intercept = coef(model)[1],
            Slope = coef(model)[2])

# View the regression results for each year
print(model_summary)

# Step 3: Generate predicted values for plotting
df_combined_00 <- df_combined_00 %>%
  left_join(model_summary, by = "Year") %>%
  mutate(Q_Bock_pred = Intercept + Slope * Q_Ursprung)

# Step 4: Plot the data and the linear regression lines for each year
ggplot(df_combined_00, aes(x = Q_Ursprung, y = Q_Bock)) +
  geom_point(aes(color = as.factor(Year)), size = 3) +  # Scatter plot with color by year
  geom_abline(aes(intercept = Intercept, slope = Slope, color = as.factor(Year)), linetype = "solid") +  # Linear regression lines
  labs(title = "Linear Regression Between Q_Ursprung and Q_Bock for Each Year",
       x = "Q_Ursprung",
       y = "Q_Bock",
       color = "Year") +
  theme_minimal() +
  theme(legend.position = "bottom")
```


```{r}
# Assuming your data is in a DataFrame called 'df_combined_00' with columns 'Year', 'Q_Ursprung', and 'Q_Bock'

# Step 1: Fit a logarithmic regression model for each year with Q_Bock as the independent variable
log_models <- df_combined_02 %>%
  group_by(Year) %>%
  do(model = lm(Q_Ursprung ~ log(Q_Bock), data = .))

# Step 2: Extract coefficients (Intercept and Slope) from each model
log_model_summary <- log_models %>%
  summarise(Year = Year,
            Intercept = coef(model)[1],
            Slope = coef(model)[2])

# Step 3: Merge the model coefficients back into the original data
df_combined_02 <- df_combined_02 %>%
  left_join(log_model_summary, by = "Year")

# Step 4: Generate predicted values for Q_Ursprung using the logarithmic model for each year
#df_combined_02 <- df_combined_02 %>%
#  mutate(Q_Ursprung_pred = Intercept + Slope * log(Q_Bock))

# Step 5: Plot the data and the logarithmic regression lines for each year using ggplot2
p <- ggplot(df_combined_02, aes(x = Q_Bock, y = Q_Ursprung)) +
  geom_point(aes(color = as.factor(Year)), size = 2) +  # Scatter plot with color by year
  geom_line(aes(y = Q_Ursprung_pred, color = as.factor(Year)), linetype = "solid") +  # Logarithmic regression lines
  labs(title = "Logarithmic Regression Between Q_Bock and Q_Ursprung for Each Year",
       x = "Q_Bock",
       y = "Q_Ursprung",
       color = "Year") +
  theme_minimal() +
  theme(legend.position = "bottom")

# Step 6: Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)

# Step 7: Add regression line labels
# interactive_plot <- interactive_plot %>%
#   layout(
#     annotations = lapply(unique(df_combined_02$Year), function(year) {
#       slope <- log_model_summary$Slope[log_model_summary$Year == year]
#       intercept <- log_model_summary$Intercept[log_model_summary$Year == year]
#       list(
#         x = max(df_combined_02$Q_Bock) * 0.9,  # Position the label slightly inside the plot
#         y = intercept + slope * log(max(df_combined_02$Q_Bock) * 0.9),  # Calculate y based on the regression formula
#         text = paste("y =", round(intercept, 2), "+", round(slope, 2), "* log(x)"),
#         showarrow = TRUE,
#         arrowhead = 2,
#         ax = 20,  # Position offset for the arrow
#         ay = -20, # Position offset for the arrow
#         font = list(size = 12)
#       )
#     })
#   )

# Step 8: Show the interactive plot
interactive_plot
```


## Waterlevel regression for all Years

```{r}
# Assuming your data is in a DataFrame called 'df_combined_02' with columns 'Year', 'P_D_W_Ursprung', and 'P_D_W_Bock'

# Step 1: Fit a logarithmic regression model for each year with P_D_W_Bock as the independent variable
log_models <- df_combined_02 %>%
  group_by(Year) %>%
  do(model = lm(P_D_W_Ursprung ~ log(P_D_W_Bock), data = .))

# Step 2: Extract coefficients (Intercept and Slope) from each model
log_model_summary <- log_models %>%
  summarise(Year = Year,
            Intercept = coef(model)[1],
            Slope = coef(model)[2])

# Step 3: Merge the model coefficients back into the original data
df_combined_02 <- df_combined_02 %>%
  left_join(log_model_summary, by = "Year")

# Step 4: Generate predicted values for P_D_W_Ursprung using the logarithmic model for each year
df_combined_02 <- df_combined_02 %>%
  mutate(P_D_W_Ursprung_pred = Intercept + Slope * log(P_D_W_Bock))

# Step 5: Plot the data and the logarithmic regression lines for each year using ggplot2
p <- ggplot(df_combined_02, aes(x = P_D_W_Bock, y = P_D_W_Ursprung)) +
  geom_point(aes(color = as.factor(Year)), size = 2) +  # Scatter plot with color by year
  geom_line(aes(y = P_D_W_Ursprung_pred, color = as.factor(Year)), linetype = "solid") +  # Logarithmic regression lines
  labs(title = "Logarithmic Regression Between P_D_W_Bock and P_D_W_Ursprung for Each Year",
       x = "P_D_W_Bock",
       y = "P_D_W_Ursprung",
       color = "Year") +
  theme_minimal() +
  theme(legend.position = "bottom")

# Step 6: Convert the ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)

# # Step 7: Add regression line formulas as annotations (labels for each year)
# regression_texts <- lapply(unique(df_combined_02$Year), function(year) {
#   slope <- log_model_summary$Slope[log_model_summary$Year == year]
#   intercept <- log_model_summary$Intercept[log_model_summary$Year == year]
#   formula_text <- paste("y =", round(intercept, 2), "+", round(slope, 2), "* log(x)")
#   
#   list(
#     x = max(df_combined_02$P_D_W_Bock) * 0.9,  # Position the label slightly inside the plot
#     y = intercept + slope * log(max(df_combined_02$P_D_W_Bock) * 0.9),  # Calculate y based on the regression formula
#     text = formula_text,
#     showarrow = TRUE,
#     arrowhead = 2,
#     ax = 20,  # Position offset for the arrow
#     ay = -20, # Position offset for the arrow
#     font = list(size = 12)
#   )
# })
# 
# # Step 8: Update plot to include custom annotations for regression formulas
# interactive_plot <- interactive_plot %>%
#   layout(
#     annotations = regression_texts,
#     showlegend = FALSE  # Hide the legend, since we are adding custom annotations for formulas
#   )

# Step 9: Show the interactive plot
interactive_plot
```